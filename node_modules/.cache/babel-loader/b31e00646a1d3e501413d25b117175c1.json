{"remainingRequest":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/thread-loader/dist/cjs.js!/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/babel-loader/lib/index.js!/Users/zhaoguanglin/Documents/corgi/corgi-admin/src/store/modules/slideBadge.js","dependencies":[{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/src/store/modules/slideBadge.js","mtime":1588171602000},{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _slicedToArray from \"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.reflect.set\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { getCountTask, countCheckPic, countReport } from '@/api/contentMgr'; // 设置循环定时器，执行获取计数的方法\n\nfunction setMethodTimer(_x) {\n  return _setMethodTimer.apply(this, arguments);\n} // 获取计数方法，要求方法名和Router中,meta下的badge值一致\n\n\nfunction _setMethodTimer() {\n  _setMethodTimer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(method) {\n    var faildCount,\n        timeout,\n        _args6 = arguments;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            faildCount = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : 0;\n            timeout = 3000;\n            _context6.prev = 2;\n            _context6.next = 5;\n            return method();\n\n          case 5:\n            faildCount = 0;\n            _context6.next = 12;\n            break;\n\n          case 8:\n            _context6.prev = 8;\n            _context6.t0 = _context6[\"catch\"](2);\n            console.error(_context6.t0);\n\n            if (++faildCount >= 3) {\n              faildCount = 0;\n              timeout = 1000 * 60 * 5;\n            }\n\n          case 12:\n            _context6.prev = 12;\n            setTimeout(function () {\n              return setMethodTimer(method, faildCount);\n            }, timeout);\n            return _context6.finish(12);\n\n          case 15:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[2, 8, 12, 15]]);\n  }));\n  return _setMethodTimer.apply(this, arguments);\n}\n\nvar methodsMap = {\n  user: function () {\n    var _user = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var params, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              params = {\n                type: 'user'\n              };\n              _context.next = 3;\n              return getCountTask(params);\n\n            case 3:\n              result = _context.sent;\n\n              if (result && result.hasOwnProperty('data')) {\n                state.valuesMap.user = result.data;\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function user() {\n      return _user.apply(this, arguments);\n    }\n\n    return user;\n  }(),\n  activity: function () {\n    var _activity = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var params, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              params = {\n                type: 'activity'\n              };\n              _context2.next = 3;\n              return getCountTask(params);\n\n            case 3:\n              result = _context2.sent;\n\n              if (result && result.hasOwnProperty('data')) {\n                state.valuesMap.activity = result.data;\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function activity() {\n      return _activity.apply(this, arguments);\n    }\n\n    return activity;\n  }(),\n  avatorCensor: function () {\n    var _avatorCensor = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var params, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              params = {\n                type: 'user',\n                status: 'check'\n              };\n              _context3.next = 3;\n              return countCheckPic(params);\n\n            case 3:\n              result = _context3.sent;\n\n              if (result && result.hasOwnProperty('data')) {\n                state.valuesMap.avatorCensor = result.data;\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function avatorCensor() {\n      return _avatorCensor.apply(this, arguments);\n    }\n\n    return avatorCensor;\n  }(),\n  activityImageCensor: function () {\n    var _activityImageCensor = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n      var params, result;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              params = {\n                type: 'activity',\n                status: 'check'\n              };\n              _context4.next = 3;\n              return countCheckPic(params);\n\n            case 3:\n              result = _context4.sent;\n\n              if (result && result.hasOwnProperty('data')) {\n                state.valuesMap.activityImageCensor = result.data;\n              }\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function activityImageCensor() {\n      return _activityImageCensor.apply(this, arguments);\n    }\n\n    return activityImageCensor;\n  }(),\n  report: function () {\n    var _report = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n      var result;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return countReport();\n\n            case 2:\n              result = _context5.sent;\n\n              if (result && result.hasOwnProperty('data')) {\n                state.valuesMap.report = result.data;\n              }\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function report() {\n      return _report.apply(this, arguments);\n    }\n\n    return report;\n  }()\n}; // 一级菜单与二级菜单关联关系\n\nvar dotMap = {\n  contentMgr: ['user', 'activity', 'avatorCensor', 'activityImageCensor', 'report']\n}; // 所有计数值保管对象\n\nvar valuesMap = Object.keys(methodsMap).reduce(function (map, key) {\n  Reflect.set(map, key, 0);\n  return map;\n}, {}); // 所有红点标记状态保管对象\n\nvar dotStatus = Object.keys(dotMap).reduce(function (map, key) {\n  Reflect.set(map, key, 0);\n  return map;\n}, {}); // 设置代理，设置新值时动态修改dotStatus中对应dot的状态\n\nvaluesMap = new Proxy(valuesMap, {\n  set: function set(target, key, value) {\n    Reflect.set(target, key, value);\n    var dot = Object.entries(dotMap).find(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          dot = _ref2[0],\n          badgeKeys = _ref2[1];\n\n      return badgeKeys.some(function (badge) {\n        return badge === key;\n      });\n    });\n\n    if (dot) {\n      var _dot = _slicedToArray(dot, 2),\n          dotKey = _dot[0],\n          badgeKeys = _dot[1];\n\n      dotStatus[dotKey] = badgeKeys.some(function (badge) {\n        return state.valuesMap[badge];\n      });\n    }\n\n    return true;\n  }\n});\nvar state = {\n  valuesMap: valuesMap,\n  dotStatus: dotStatus\n};\nvar mutations = {\n  // 激活对应计数方法的定时器\n  ADD_ACTIVE_BADGE: function ADD_ACTIVE_BADGE(state, name) {\n    var method = methodsMap[name];\n    method && setMethodTimer(method);\n  }\n};\nvar actions = {};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",null]}