{"remainingRequest":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/babel-loader/lib/index.js!/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/zhaoguanglin/Documents/corgi/corgi-admin/src/mixins/commonSet.js","dependencies":[{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/src/mixins/commonSet.js","mtime":1589869018752},{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visible = exports.parseImageStatus = exports.searchCommon = exports.getBreadList = exports.emit = void 0;\n\nrequire(\"core-js/modules/es6.array.find\");\n\nvar _const = require(\"@/utils/const\");\n\nvar emit = {\n  methods: {\n    acceptEmitData: function acceptEmitData(params) {\n      params.prop.reduce(function (data, prop, index) {\n        if (index === params.prop.length - 1) {\n          data[prop] = params.value;\n          return;\n        }\n\n        return data[prop];\n      }, this);\n    },\n    acceptEmitFunc: function acceptEmitFunc(params) {\n      this[params.function](params.arguments);\n    }\n  }\n};\nexports.emit = emit;\nvar getBreadList = {\n  data: function data() {\n    return {\n      breadList: []\n    };\n  },\n  watch: {\n    $route: function $route() {\n      this.getBreadList();\n    }\n  },\n  created: function created() {\n    this.getBreadList();\n  },\n  methods: {\n    getBreadList: function getBreadList() {\n      this.breadList = this.$route.matched.filter(function (_ref) {\n        var breadTitle = _ref.meta.breadTitle;\n        return breadTitle;\n      }).map(function (_ref2) {\n        var breadTitle = _ref2.meta.breadTitle,\n            path = _ref2.path;\n        return {\n          breadTitle: breadTitle,\n          path: path\n        };\n      });\n    }\n  }\n};\nexports.getBreadList = getBreadList;\nvar searchCommon = {\n  data: function data() {\n    return {\n      searchRef: 'mainSearch'\n    };\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.resetForm('mainSearch');\n  },\n  methods: {\n    resetForm: function resetForm(formName) {\n      if (this.$refs[formName] !== undefined) {\n        this.$refs[formName].resetFields();\n      }\n    }\n  }\n};\nexports.searchCommon = searchCommon;\nvar parseImageStatus = {\n  methods: {\n    parseImageStatusText: function parseImageStatusText(status) {\n      var parsed = _const.allCensorshipTypes.find(function (item) {\n        return status === item.value;\n      });\n\n      return parsed ? parsed.label : '--';\n    },\n    parseImageStatusType: function parseImageStatusType(status) {\n      var parsed = _const.allCensorshipTypes.find(function (item) {\n        return status === item.value;\n      });\n\n      var type = parsed ? _const.checkBadgeType.find(function (item) {\n        return parsed.value === item.value;\n      }) : '';\n      return type ? type.type : '';\n    }\n  }\n};\nexports.parseImageStatus = parseImageStatus;\nvar visible = {\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      show: false\n    };\n  },\n  watch: {\n    show: function show(value) {\n      !value && this.$emit('update:visible', value);\n    },\n    visible: function visible(value) {\n      this.show = !!value;\n    }\n  },\n  methods: {\n    handleDialogClose: function handleDialogClose() {\n      this.show = false;\n    }\n  }\n};\nexports.visible = visible;",null]}