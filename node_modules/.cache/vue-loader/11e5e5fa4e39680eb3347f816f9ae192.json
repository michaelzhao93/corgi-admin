{"remainingRequest":"/Users/zhaoguanglin/corgi-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhaoguanglin/corgi-admin/src/views/matchMgr/interest/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhaoguanglin/corgi-admin/src/views/matchMgr/interest/index.vue","mtime":1592667440687},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport tableCommon from '@/mixins/tableCommon'\r\nimport { searchCommon } from '@/mixins/commonSet'\r\nimport { getStatistics, getUserStay } from '@/api/dataCenter'\r\nimport { pickerOptions, keepColumnStyle } from '@/utils/const'\r\nimport { get_match_factor2,set_match_factor2,refresh_all_match} from '@/api/matchMgr'\r\nimport pageConfig from './pageConfig'\r\nexport default {\r\n  mixins: [tableCommon, searchCommon],\r\n  data() {\r\n    return {\r\n      ...pageConfig,\r\n      pickerOptions,\r\n      extraHeight: 0,\r\n      loadingMap: {\r\n        tableLoading: false\r\n      }\r\n    }\r\n  },\r\n  beforeMount() {\r\n    this.$nextTick(() => {\r\n      this.addTabelHeightListener('parent')\r\n      this.getPageData()\r\n    })\r\n  },\r\n  methods: {\r\n    generateData(params) {\r\n      console.log(params)\r\n      const { startDate, endDate, stayCount } = Object.entries(params).reduce((data, [key, value]) => {\r\n        data[key] = key === 'stayCount' ? value : this.$day(value)\r\n        return data\r\n      }, {})\r\n      const diff = Math.abs(startDate.diff(endDate, 'day'))\r\n      return Array(diff).fill('').map((item, index) => {\r\n        const loginDate = startDate.add(index, 'day')\r\n        let count = Math.floor(Math.random() * 1000)\r\n        return Array(Number(stayCount) + 1).fill('').map((keep, keepIndex) => {\r\n          count = parseInt(count * (1 - Math.floor(Math.random() * 30) / 100))\r\n          return {\r\n            loginDate: loginDate.format('YYYY-MM-DD'),\r\n            stayDate: loginDate.add(keepIndex, 'day').format('YYYY-MM-DD'),\r\n            stayCount: keepIndex,\r\n            count\r\n          }\r\n        })\r\n      }).flat(Infinity)\r\n    },\r\n    UpdateData() {\r\n      console.log(\"update\");\r\n          refresh_all_match();\r\n          this.$message({ type: 'success', message: '更新成功' })\r\n    },\r\n    tableDbEdit(row, column, cell, event) {\r\n      var self = this;\r\n          console.log(row, column, cell, event);\r\n          if (column.label != \"身材\") {\r\n            event.target.innerHTML = \"\";\r\n            let cellInput = document.createElement(\"input\");\r\n            cellInput.value = \"\";\r\n            cellInput.setAttribute(\"type\", \"number\");\r\n            cellInput.style.width = \"70%\";\r\n            cell.appendChild(cellInput);\r\n            cellInput.onblur = function() {\r\n              cell.removeChild(cellInput);\r\n              event.target.innerHTML = cellInput.value;\r\n              let group1 = row.role;\r\n              let group2 = column.label;\r\n              let first,second = 0;\r\n                      const temp = {  }\r\n\r\n                      if(group2==\"狗/游戏/肉长/比我矮\")\r\n                      {\r\n                        first = cellInput.value;\r\n                        second = self.tableData[0].second;\r\n                        self.tableData[0].first = first;\r\n                      }\r\n                      \r\n                      if(group2==\"猫/健身/精瘦/比我高\")\r\n                      {\r\n                        second = cellInput.value;\r\n                        first = self.tableData[0].first;\r\n                        self.tableData[0].second = second;\r\n                      }\r\n          temp.value = first+\",\"+second;\r\n          temp.table = \"int\"\r\n          const res = set_match_factor2(temp);\r\n                        console.log(temp);\r\n            };\r\n          }\r\n    },\r\n\r\n    async getPageData() {\r\n        try {\r\n          this.loadingMap.tableLoading = true\r\n          const table = 'int';\r\n          const keepData = await get_match_factor2({table});\r\n                    console.log(keepData)\r\n\r\n          let common_table_info = [];\r\n            common_table_info.push({first:keepData.data[0],second:keepData.data[1]});\r\n\r\n          this.tableData = common_table_info;\r\n\r\n               } catch (err) {\r\n          console.log(err)\r\n          this.tableData = []\r\n        } finally {\r\n          this.loadingMap.tableLoading = false\r\n        }\r\n      \r\n    },\r\n    \r\n    getColumnStyle({ row, column, rowIndex, columnIndex }) {\r\n      const value = row[column.property]\r\n      if (typeof value === 'number' && row.base !== 0) {\r\n        const persent = (value / row.base * 100).toFixed(1)\r\n        const check = keepColumnStyle.find(item => persent >= item.min && persent <= item.max)\r\n        return check && {\r\n          backgroundColor: check.background,\r\n          color: check.color || '#000'\r\n        }\r\n      }\r\n    } \r\n  }\r\n\r\n}\r\n\r\n\r\n",null]}