{"remainingRequest":"/Users/zhaoguanglin/corgi-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhaoguanglin/corgi-admin/src/views/dataCenter/overview/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhaoguanglin/corgi-admin/src/views/dataCenter/overview/index.vue","mtime":1589959014000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getStatistics } from '@/api/dataCenter'\nimport statistics from '../components/statistics'\nimport dateRangePicker from '../components/dateRangePicker'\nimport Chart from '@/components/Chart'\nimport { emit } from '@/mixins/commonSet'\nimport tableCommon from '@/mixins/tableCommon'\nimport pageConfig from './pageConfig'\nexport default {\n  components: { statistics, dateRangePicker, Chart },\n  mixins: [emit, tableCommon, pageConfig],\n  data() {\n    return {\n      loadingMap: {\n        statsLoading: true\n      },\n      refs: {\n        sysBtn: 'sysTypeBtn'\n      },\n      contrast: false,\n      extraHeight: 350,\n      contrastProp: ['base', 'contrast']\n    }\n  },\n  computed: {\n    chartTitle() {\n      const type = this.chartType\n      const match = this.allChartType.find(item => item.label === type)\n      return match && match.text || '未知标题'\n    },\n    chartOptionWatcher() {\n      const option = this.chartOption\n      option.option.title.text = this.chartTitle\n      return option\n    },\n    isTimeRangeSelected() {\n      if (this.contrast) {\n        return (this.timeRangeFirst.length >= 2 && this.timeRangeSecond.length >= 2)\n      } else {\n        return this.timeRangeFirst.length >= 2\n      }\n    },\n    isTimeRangeValid() {\n      if (this.isTimeRangeSelected) {\n        if (this.contrast) {\n          const [firstStart, firstEnd] = this.timeRangeFirst.map(item => this.$day(item))\n          const [secondStart, secondEnd] = this.timeRangeSecond.map(item => this.$day(item))\n          const firstDiff = firstStart.diff(firstEnd, 'day')\n          const secondDiff = secondStart.diff(secondEnd, 'day')\n          if (firstDiff !== secondDiff) {\n            this.$message({ type: 'warning', message: '对比天数必须一致' })\n            return false\n          }\n        }\n        return true\n      } else {\n        this.$message({ type: 'warning', message: '请选择时间' })\n        return false\n      }\n    }\n  },\n  watch: {\n    chartTitle() {\n      this.isTimeRangeSelected && this.parseChartData()\n    }\n  },\n  mounted() {\n    this.addTabelHeightListener('parent')\n  },\n  methods: {\n    async getData() {\n      try {\n        const task = []\n        this.isTimeRangeSelected && task.push(this.handleChartBtnClick())\n        await Promise.all(task)\n      } catch (err) {\n        console.error(err)\n      }\n    },\n    async handleChartBtnClick() {\n      if (this.isTimeRangeValid) {\n        try {\n          const task = []\n          this.allChartType.forEach(chartType => {\n            const type = chartType.label\n            task.push(this.wrapGetChartData(type))\n          })\n          await Promise.all(task)\n          this.parseChartData()\n          this.parseTableData()\n        } catch (err) {\n          console.error(err)\n        }\n      }\n    },\n    async wrapGetChartData(type) {\n      const task = []\n      task.push(this.getChartData(type, this.timeRangeFirst))\n      this.contrast && task.push(this.getChartData(type, this.timeRangeSecond))\n      this.chartData[type] = await Promise.all(task)\n    },\n    async getChartData(type, dateArr) {\n      const [startDate, endDate] = dateArr.map(item => this.$day(item).format('YYYY-MM-DD'))\n      const result = await getStatistics({ type, startDate, endDate })\n      return result.hasOwnProperty('data') && Array.isArray(result.data) ? result.data : []\n    },\n    parseChartData() {\n      this.chartOption.option.xAxis = []\n      this.chartOption.option.series = []\n      this.chartOption.option.dataZoom[0].xAxisIndex = []\n\n      const matchData = this.chartData[this.chartType]\n      Array.isArray(matchData) && matchData.forEach((item, index) => {\n        const xAxis = this.$common.deepCopy(this.xAxisTpl)\n        const series = this.$common.deepCopy(this.seriesTpl)\n\n        item.forEach((dataItem) => {\n          xAxis.data.push(dataItem.date)\n          series.data.push(dataItem.count)\n        })\n\n        series.name = index === 0 ? '基准' : '对比'\n        this.chartOption.option.xAxis.push(xAxis)\n        this.chartOption.option.series.push(series)\n\n        this.chartOption.option.dataZoom[0].xAxisIndex.push(index)\n      })\n      this.showChart = true\n    },\n    parseTableData() {\n      this.loadingMap.tableLoading = true\n      this.tableData = []\n      let diffDay\n      if (this.contrast) {\n        diffDay = this.$day(this.timeRangeFirst[0]).diff(this.timeRangeSecond[0], 'day')\n      }\n      const propName = Object.keys(this.chartData)\n      // 初步处理数据结构\n      const parse = {}\n      propName.forEach(prop => {\n        parse[prop] = {}\n        const [baseData, contrastData] = this.chartData[prop]\n        if (this.contrast) {\n          parse[prop].contrast = new Map()\n          contrastData.forEach(item => parse[prop].contrast.set(item.date, item.count))\n        }\n        parse[prop].base = new Map()\n        baseData.forEach(item => parse[prop].base.set(item.date, item.count))\n      })\n      // 转化数据结构成日期为KEY的对象\n      const data = {}\n      Object.entries(parse).forEach(([type, typeData]) => {\n        Object.entries(typeData).forEach(([prop, propData]) => {\n          if (!data.hasOwnProperty(prop)) {\n            data[prop] = {}\n          }\n          propData.forEach((count, date) => {\n            if (!data[prop].hasOwnProperty(date)) {\n              data[prop][date] = {}\n            }\n            data[prop][date][type] = count\n          })\n        })\n      })\n      // 转化为table数据结构\n      Object.entries(data.base).forEach(([date, dateData], tableItemIndex) => {\n        const index = `tableItem-${tableItemIndex}`\n        const temp = { date, index }\n        if (this.contrast) {\n          temp.date = '展开'\n          temp.children = []\n          const baseIndex = `tableItem-${tableItemIndex}-baseChild`\n          const baseChild = { date, index: baseIndex }\n          Object.entries(data.base[date]).forEach(([type, count]) => {\n            baseChild[type] = count\n          })\n          const baseDate = this.$day(date)\n          const absDiff = Math.abs(diffDay)\n          let contrastDate = diffDay > 0 ? baseDate.subtract(absDiff, 'day') : baseDate.add(absDiff, 'day')\n          contrastDate = contrastDate.format('YYYY-MM-DD')\n          const contrastIndex = `tableItem-${tableItemIndex}-contrastChild`\n          const contrastChild = { date: contrastDate, index: contrastIndex }\n          const contrastData = data.contrast[contrastDate]\n          contrastData && Object.entries(contrastData).forEach(([type, count]) => {\n            contrastChild[type] = count\n          })\n          temp.children.push(baseChild)\n          temp.children.push(contrastChild)\n        } else {\n          Object.entries(dateData).forEach(([type, count]) => {\n            temp[type] = count\n          })\n        }\n        this.tableData.push(temp)\n      })\n      this.dateAlign = this.contrast ? 'left' : 'center'\n      const baseTitle = this.timeRangeFirst.map(date => this.$day(date).format('YYYY-MM-DD')).join(' 至 ')\n      const contrastTitle = this.contrast ? ' 对比 ' + this.timeRangeSecond.map(date => this.$day(date).format('YYYY-MM-DD')).join(' 至 ') : ''\n      this.tableHead = baseTitle + contrastTitle\n      this.loadingMap.tableLoading = false\n    },\n    exportData() {\n      const header = ['日期'].concat(this.allChartType.map(item => item.text))\n      const filename = this.allChartType.find(item => item.label === this.chartType).text\n      let data\n      if (this.contrast) {\n        data = this.tableData.map(item => {\n          const itemClone = this.$common.deepCopy(item)\n          delete itemClone.index\n          return itemClone.children.map(child => {\n            const childClone = this.$common.deepCopy(child)\n            delete childClone.index\n            return Object.values(childClone)\n          })\n        }).flat(1)\n      } else {\n        data = this.tableData.map(item => {\n          const itemClone = this.$common.deepCopy(item)\n          delete itemClone.index\n          return Object.values(itemClone)\n        })\n      }\n      import('@/vendor/Export2Excel').then(excel => {\n        excel.export_json_to_excel({\n          header,\n          data,\n          filename,\n          autoWidth: true,\n          bookType: 'xlsx'\n        })\n      })\n    },\n    isContrast() {\n      this.contrast = !this.contrast\n    }\n  }\n}\n",null]}