{"remainingRequest":"/Users/zhaoguanglin/corgi-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhaoguanglin/corgi-admin/src/views/msgMgr/setting/Detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhaoguanglin/corgi-admin/src/views/msgMgr/setting/Detail.vue","mtime":1592926349800},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/corgi-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { add_system_message,update_system_message} from '@/api/msgMgr'\nimport { allReportType } from '@/utils/const'\nimport ReportStatus from '@/components/ReportStatus'\nimport Userid from '@/components/Userid'\nimport Activityid from '@/components/Activityid'\nimport { visible } from '@/mixins/commonSet'\nexport default {\n  components: { ReportStatus, Userid, Activityid },\n  mixins: [visible],\n  props: {\n    useData: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      tempImg:\"\",\n      chartRadio:\"启用\",\n      TypechartRadio:\"文本\",\n      shopState:true,\n      allReportType\n    }\n  },\n  methods: {\n    async getData() {\n\n                  console.log(this.useData)\n\n    },\n    async handleAddMember(iscancle)\n    {\n      if(iscancle)\n      {\n        this.handleDialogClose();\n        return;\n      }\n      let content =  this.useData.content;\n      let sentTime =  9999999999;\n      let title =  this.useData.title;\n      let status = \"disabled\";\n      let rules = [\n      {\n        ruleKey: \"\",\n        ruleValue: \"\"\n      }]\n      if(this.useData.id)\n      {\n      status = this.useData.status;\n      content =  this.useData.content;\n      sentTime =  this.useData.sentTime;\n      title =  this.useData.title;\n     rules = [\n      {\n        ruleKey: \"\",\n        ruleValue: \"\"\n      }]\n      let data = ({ id:this.useData.id,content: content, status: status, sentTime: sentTime, title: title, rules: rules});\n      console.log(data)\n      update_system_message(data);\n\n        this.handleDialogClose()\n        this.$emit('emitFunc', { function: 'getData', arguments: [] })\n      }\n      else\n      {\n\n      let data = ({ content: content, status: status, sentTime: sentTime, title: title, rules: rules});\n      console.log(data)\n      add_system_message(data);\n        this.$emit('emitFunc', { function: 'getData', arguments: [] })\n\n        this.handleDialogClose()\n      }\n\n\n    },\n    async postimg(ndata)\n    {\n      const data = await get_upload_token({})\n      let region = \"oss-cn-beijing\";\n      let accessKeyId = data.data.accessKeyId;\n      let accessKeySecret = data.data.accessKeySecret;\n      let bucket = data.data.bucketName;\n      let OSS = require('ali-oss')\n      console.log(accessKeyId)\n\n      let client = new OSS({\n        region: region,\n        accessKeyId:accessKeyId,\n        accessKeySecret:accessKeySecret,\n        stsToken: data.data.securityToken,\n        bucket:bucket,\n      });\n      console.log(client)\n\n      let date = Date.parse(new Date());\n      let fileName = `${date}`;\n      fileName = Base64.encode(fileName)  \n      fileName = \"shop/\"+fileName;\n      console.log(fileName)\n      try {\n          //object-name可以自定义为文件名（例如file.txt）或目录（例如abc/test/file.txt）的形式，实现将文件上传至当前Bucket或Bucket下的指定目录。\n          let result = await client.put(fileName, ndata);\n          console.log(result);\n          this.tempImg = result.url;\n                    console.log(tempImg);\n        } catch (e) {\n          console.log(e);\n    }\n\n    },\n    async uploadFile(event) {\n      let self = this;\n\n\n\n      let file = event.target.files[0]; //获取input的图片file值\n            let point = file.name.lastIndexOf('.');\n      let suffix = file.name.substr(point);\n     let fileName = file.name.substr(0, point);\n        let date = Date.parse(new Date());\n      fileName = `${fileName}_${date}${suffix}`;\n\n\t\t\t// if(file.size<=1* 1024* 1024){\n\t\t\t// //判断图片是否大于1M,是就直接上传\n      // ndata=file;\n      // self.postimg(ndata);\n\t\t\t// }else{\n\t\t\t// \t//反之压缩图片\n\t\t\t//    let reader = new FileReader();\n\t\t\t// \t// 将图片2将转成 base64 格式\n\t\t\t// \treader.readAsDataURL(file);\n\t\t\t// \tconsole.log(reader)\n\t\t\t// \t// 读取成功后的回调\n\t\t\t// \treader.onloadend = function () {\n\t\t\t// \tlet result = this.result;\n\t\t\t// \tlet img = new Image();\n\t\t\t// \timg.src = result;\n      //          img.onload = function () {\n      //   ndata=  self.compress(img,0.6);\n      //               console.log('*******ndata*******')\n      //       console.log(ndata)\n\t\t\t//         self.postimg(ndata);\n\n\t\t\t// \t// //BASE64转图片\n\t\t\t// \t// var arr = ndata.split(','), mime = arr[0].match(/:(.*?);/)[1],\n\t\t\t// \t// bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n\t\t\t// \t// while(n--){\n\t\t\t// \t// u8arr[n] = bstr.charCodeAt(n);\n\t\t\t// \t// }\n      //   //  ndata=new File([u8arr],f.file.name, {type:mime})\n      //          }\n      //   }\n      // }\n\t\t\t        self.postimg(file);\n\n\n  },\n  compress(img, size) {\n            let canvas = document.createElement('canvas')\n            let ctx = canvas.getContext('2d')\n            let initSize = img.src.length\n            let width = img.width\n            let height = img.height\n            canvas.width = width\n            canvas.height = height\n            // 铺底色\n            ctx.fillStyle = '#fff'\n            ctx.fillRect(0, 0, canvas.width, canvas.height)\n            ctx.drawImage(img, 0, 0, width, height)\n            //进行最小压缩\n            let ndata = canvas.toDataURL('image/jpeg', size)\n            console.log('*******压缩后的图片大小*******')\n            console.log(ndata.length / 1024)\n            const buffer = Buffer.from(ndata, 'base64');\n            console.log(buffer)\n\n            return buffer\n        },\n           handleRadioChange(value) {\n           this.shopState = this.chartRadio === '启用' ? true: false\n    },\n               typeHandleRadioChange(value) {\n    },\n}\n}\n",null]}