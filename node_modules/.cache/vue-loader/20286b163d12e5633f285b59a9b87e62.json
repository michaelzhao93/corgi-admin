{"remainingRequest":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhaoguanglin/Documents/corgi/corgi-admin/src/views/dataCenter/DAU/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/src/views/dataCenter/DAU/index.vue","mtime":1586875212000},{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhaoguanglin/Documents/corgi/corgi-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport '../style/index.scss'\r\nimport { getStatistics } from '@/api/dataCenter'\r\nimport dateRangePicker from '../components/dateRangePicker'\r\nimport Chart from '@/components/Chart'\r\nimport { emit } from '@/mixins/commonSet'\r\nimport tableCommon from '@/mixins/tableCommon'\r\nimport pageConfig from './pageConfig'\r\nexport default {\r\n  components: { dateRangePicker, Chart },\r\n  mixins: [emit, tableCommon, pageConfig],\r\n  data() {\r\n    return {\r\n      loadingMap: {\r\n        statsLoading: true\r\n      },\r\n      contrast: false,\r\n      extraHeight: 350\r\n    }\r\n  },\r\n  computed: {\r\n    chartOptionWatcher() {\r\n      return this.chartOption\r\n    },\r\n    isTimeRangeSelected() {\r\n      return this.baseTimeRange.length >= 2\r\n    }\r\n  },\r\n  watch: {\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.addTabelHeightListener('parent')\r\n      this.getData()\r\n    })\r\n  },\r\n  methods: {\r\n    async getData() {\r\n      try {\r\n        const task = []\r\n        this.isTimeRangeSelected && task.push(this.handleChartBtnClick())\r\n        await Promise.all(task)\r\n      } catch (err) {\r\n        console.log(err)\r\n      }\r\n    },\r\n    async handleChartBtnClick() {\r\n      if (this.isTimeRangeSelected) {\r\n        try {\r\n          const task = []\r\n          const baseSearchTime = this.baseTimeRange.map(date => this.$day(date).format('YYYY-MM-DD'))\r\n          task.push(this.getChartData('dau', baseSearchTime))\r\n          if (this.MOM) {\r\n            const searchTime = this.baseTimeRange.map(date => this.$day(date).subtract(1, 'month').format('YYYY-MM-DD'))\r\n            task.push(this.getChartData('MOM', searchTime))\r\n          }\r\n          if (this.YOY) {\r\n            const searchTime = this.baseTimeRange.map(date => this.$day(date).subtract(1, 'year').format('YYYY-MM-DD'))\r\n            task.push(this.getChartData('YOY', searchTime))\r\n          }\r\n          await Promise.all(task)\r\n          this.parseChartData()\r\n          this.parseTableData()\r\n        } catch (err) {\r\n          console.log(err)\r\n        }\r\n      }\r\n    },\r\n    async getChartData(dataType, dateArr) {\r\n      const type = this.chartType\r\n      const [startDate, endDate] = dateArr\r\n      const result = await getStatistics({ type, startDate, endDate })\r\n      const check = result.hasOwnProperty('data') && Array.isArray(result.data) ? result.data : []\r\n      this.chartData[dataType] = check.reduce((data, item) => {\r\n        data[item.date] = item\r\n        return data\r\n      }, {})\r\n    },\r\n    parseChartData() {\r\n      this.chartOption.option.xAxis = []\r\n      this.chartOption.option.series = []\r\n      this.chartOption.option.dataZoom[0].xAxisIndex = []\r\n      Object.entries(this.chartData).forEach((dataItem, index) => {\r\n        const xAxis = this.$common.deepCopy(this.xAxisTpl)\r\n        const series = this.$common.deepCopy(this.seriesTpl)\r\n        const [key, value] = dataItem\r\n        Object.values(value).forEach((item, itemIndex) => {\r\n          if (key === 'dau') {\r\n            xAxis.data.push(item.date)\r\n            series.data.push(item.count)\r\n          } else {\r\n            let targetDate\r\n            if (key === 'MOM') {\r\n              targetDate = this.$day(item.date).add(1, 'month').format('YYYY-MM-DD')\r\n            } else if (key === 'YOY') {\r\n              targetDate = this.$day(item.date).add(1, 'year').format('YYYY-MM-DD')\r\n            }\r\n            const matchData = this.chartData.dau[targetDate]\r\n            const base = (matchData && matchData.hasOwnProperty('count')) ? item.count - matchData.count : '--'\r\n            let ratio\r\n            if (base === '--') {\r\n              ratio = '--'\r\n            } else {\r\n              const before = item.count\r\n              if (before === 0) {\r\n                if (base === 0) {\r\n                  ratio = '0%'\r\n                } else {\r\n                  ratio = (before + 1) * base * 100 + '%'\r\n                }\r\n              } else {\r\n                if (base === 0) {\r\n                  ratio = (before - 1) * base * 100 + '%'\r\n                } else {\r\n                  ratio = (base / before).toFixed(2) * 100 + '%'\r\n                }\r\n              }\r\n            }\r\n            series.data.push(ratio)\r\n          }\r\n        })\r\n        series.name = this.allChartType.find(item => key === item.label).text\r\n        this.chartOption.option.xAxis.push(xAxis)\r\n        this.chartOption.option.series.push(series)\r\n        this.chartOption.option.dataZoom[0].xAxisIndex.push(index)\r\n      })\r\n      this.showChart = true\r\n    },\r\n    parseTableData() {\r\n      this.loadingMap.tableLoading = true\r\n      this.tableData = []\r\n      const propName = Object.keys(this.chartData)\r\n      const baseProp = propName[0]\r\n      const baseData = Object.values(this.chartData[baseProp])\r\n      baseData.forEach((item, index) => {\r\n        const temp = {}\r\n        temp.date = item.date\r\n        propName.forEach((prop, itemIndex) => {\r\n          if (prop === 'dau') {\r\n            temp.dau = item.count\r\n          } else {\r\n            let targetDate\r\n            if (prop === 'MOM') {\r\n              targetDate = this.$day(temp.date).subtract(1, 'month').format('YYYY-MM-DD')\r\n            } else if (prop === 'YOY') {\r\n              targetDate = this.$day(temp.date).subtract(1, 'year').format('YYYY-MM-DD')\r\n            }\r\n            const matchData = this.chartData[prop][targetDate]\r\n            temp[prop] = matchData && matchData.hasOwnProperty('count') ? matchData.count : '--'\r\n          }\r\n        })\r\n        this.tableData.push(temp)\r\n      })\r\n      this.tableMOM = this.chartData.hasOwnProperty('MOM')\r\n      this.tableYOY = this.chartData.hasOwnProperty('YOY')\r\n      this.tableSortable = true\r\n      this.dateAlign = 'center'\r\n      this.tableHead = this.baseTimeRange.map(date => this.$day(date).format('YYYY-MM-DD')).join(' 至 ')\r\n      this.loadingMap.tableLoading = false\r\n    },\r\n    exportData() {\r\n      const header = ['日期', 'DAU']\r\n      this.tableMOM && header.push('环比')\r\n      this.tableYOY && header.push('同比')\r\n      const filename = 'DAU统计表'\r\n      const data = this.tableData.map(item => Object.values(item))\r\n      import('@/vendor/Export2Excel').then(excel => {\r\n        excel.export_json_to_excel({\r\n          header,\r\n          data,\r\n          filename,\r\n          autoWidth: true,\r\n          bookType: 'xlsx'\r\n        })\r\n      })\r\n    },\r\n    isContrast() {\r\n      this.contrast = !this.contrast\r\n    }\r\n  }\r\n}\r\n",null]}